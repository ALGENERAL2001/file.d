// Code generated by MockGen. DO NOT EDIT.
// Source: plugin/output/s3/interfaces.go

// Package mock_s3 is a generated GoMock package.
package mock_s3

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	minio "github.com/minio/minio-go"
	s3 "github.com/ozonru/file.d/plugin/output/s3"
)

// MockObjStoreFabricInterface is a mock of ObjStoreFabricInterface interface.
type MockObjStoreFabricInterface struct {
	ctrl     *gomock.Controller
	recorder *MockObjStoreFabricInterfaceMockRecorder
}

// MockObjStoreFabricInterfaceMockRecorder is the mock recorder for MockObjStoreFabricInterface.
type MockObjStoreFabricInterfaceMockRecorder struct {
	mock *MockObjStoreFabricInterface
}

// NewMockObjStoreFabricInterface creates a new mock instance.
func NewMockObjStoreFabricInterface(ctrl *gomock.Controller) *MockObjStoreFabricInterface {
	mock := &MockObjStoreFabricInterface{ctrl: ctrl}
	mock.recorder = &MockObjStoreFabricInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockObjStoreFabricInterface) EXPECT() *MockObjStoreFabricInterfaceMockRecorder {
	return m.recorder
}

// NewObjStoreClient mocks base method.
func (m *MockObjStoreFabricInterface) NewObjStoreClient(endpoint, accessKeyID, secretAccessKey string, secure bool) (s3.ObjectStoreClient, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewObjStoreClient", endpoint, accessKeyID, secretAccessKey, secure)
	ret0, _ := ret[0].(s3.ObjectStoreClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewObjStoreClient indicates an expected call of NewObjStoreClient.
func (mr *MockObjStoreFabricInterfaceMockRecorder) NewObjStoreClient(endpoint, accessKeyID, secretAccessKey, secure interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewObjStoreClient", reflect.TypeOf((*MockObjStoreFabricInterface)(nil).NewObjStoreClient), endpoint, accessKeyID, secretAccessKey, secure)
}

// MockObjectStoreClient is a mock of ObjectStoreClient interface.
type MockObjectStoreClient struct {
	ctrl     *gomock.Controller
	recorder *MockObjectStoreClientMockRecorder
}

// MockObjectStoreClientMockRecorder is the mock recorder for MockObjectStoreClient.
type MockObjectStoreClientMockRecorder struct {
	mock *MockObjectStoreClient
}

// NewMockObjectStoreClient creates a new mock instance.
func NewMockObjectStoreClient(ctrl *gomock.Controller) *MockObjectStoreClient {
	mock := &MockObjectStoreClient{ctrl: ctrl}
	mock.recorder = &MockObjectStoreClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockObjectStoreClient) EXPECT() *MockObjectStoreClientMockRecorder {
	return m.recorder
}

// BucketExists mocks base method.
func (m *MockObjectStoreClient) BucketExists(bucketName string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BucketExists", bucketName)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BucketExists indicates an expected call of BucketExists.
func (mr *MockObjectStoreClientMockRecorder) BucketExists(bucketName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BucketExists", reflect.TypeOf((*MockObjectStoreClient)(nil).BucketExists), bucketName)
}

// FPutObject mocks base method.
func (m *MockObjectStoreClient) FPutObject(bucketName, objectName, filePath string, opts minio.PutObjectOptions) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FPutObject", bucketName, objectName, filePath, opts)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FPutObject indicates an expected call of FPutObject.
func (mr *MockObjectStoreClientMockRecorder) FPutObject(bucketName, objectName, filePath, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FPutObject", reflect.TypeOf((*MockObjectStoreClient)(nil).FPutObject), bucketName, objectName, filePath, opts)
}
