// Code generated by MockGen. DO NOT EDIT.
// Source: plugin/output/clickhouse/clickhouse.go

// Package mock_clickhouse is a generated GoMock package.
package mock_clickhouse

import (
	context "context"
	sql "database/sql"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockDBIface is a mock of DBIface interface.
type MockDBIface struct {
	ctrl     *gomock.Controller
	recorder *MockDBIfaceMockRecorder
}

// MockDBIfaceMockRecorder is the mock recorder for MockDBIface.
type MockDBIfaceMockRecorder struct {
	mock *MockDBIface
}

// NewMockDBIface creates a new mock instance.
func NewMockDBIface(ctrl *gomock.Controller) *MockDBIface {
	mock := &MockDBIface{ctrl: ctrl}
	mock.recorder = &MockDBIfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDBIface) EXPECT() *MockDBIfaceMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockDBIface) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockDBIfaceMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockDBIface)(nil).Close))
}

// ExecContext mocks base method.
func (m *MockDBIface) ExecContext(ctx context.Context, query string, args ...any) (sql.Result, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, query}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ExecContext", varargs...)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExecContext indicates an expected call of ExecContext.
func (mr *MockDBIfaceMockRecorder) ExecContext(ctx, query interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, query}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecContext", reflect.TypeOf((*MockDBIface)(nil).ExecContext), varargs...)
}

// Ping mocks base method.
func (m *MockDBIface) Ping() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ping")
	ret0, _ := ret[0].(error)
	return ret0
}

// Ping indicates an expected call of Ping.
func (mr *MockDBIfaceMockRecorder) Ping() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ping", reflect.TypeOf((*MockDBIface)(nil).Ping))
}
