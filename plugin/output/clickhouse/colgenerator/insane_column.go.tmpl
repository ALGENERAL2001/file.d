// Code generated by "./colgenerator"; DO NOT EDIT.

package clickhouse

import (
	"time"

	"github.com/ClickHouse/ch-go/proto"
	insaneJSON "github.com/vitkovskii/insane-json"
)

{{- range $type := .Types }}

type {{ $type.ColumnTypeName }} struct {
	{{- if $type.CannotBeNull }}
	col *{{ $type.LibChTypeNameFull }}
	{{- else }}
	col      *{{ $type.LibChTypeNameFull }}
	nullCol  *{{ $type.NullableTypeName }}
	nullable bool
	{{- end }}
}

var (
	_ InsaneColInput = (*{{ $type.ColumnTypeName }})(nil)
	{{- if $type.Preparable }}
	_ proto.Preparable = (*{{ $type.ColumnTypeName }})(nil)
	{{- end }}
)

{{ $type.Ctor }}

func (t *{{ $type.ColumnTypeName }}) Append(node *insaneJSON.StrictNode) error {
	if node == nil || node.IsNull() {
		{{- if $type.CannotBeNull }}
		return ErrNodeIsNil
		{{- else }}
		if !t.nullable {
			return ErrNodeIsNil
		}
		t.nullCol.Append(proto.Null[{{- $type.GoName }}]())
		return nil
		{{- end }}
	}
	{{ if $type.CannotConvert -}}
	val, err := node.{{- $type.InsaneConvertFunc }}()
	if err != nil {
		return err
	}
	{{ else -}}
	v, err := node.{{- $type.InsaneConvertFunc }}()
	if err != nil {
		return err
	}
	val := {{ $type.ConvertInsaneJSONValue "v" }}
	{{ end }}
	{{- if not $type.CannotBeNull -}}
	if t.nullable {
		t.nullCol.Append(proto.NewNullable(val))
		return nil
	}
	{{ end -}}

	t.col.Append(val)

	return nil
}

func (t *{{ $type.ColumnTypeName }}) Reset() {
	t.col.Reset()
	{{- if not $type.CannotBeNull }}
	t.nullCol.Reset()
	{{- end }}
}

func (t *{{ $type.ColumnTypeName }}) Type() proto.ColumnType {
	{{- if $type.CannotBeNull }}
	return t.col.Type()
	{{- else }}
	if t.nullable {
		return t.nullCol.Type()
	}
	return t.col.Type()
	{{- end }}
}

func (t *{{ $type.ColumnTypeName }}) Rows() int {
	{{- if $type.CannotBeNull }}
	return t.col.Rows()
	{{- else }}
	if t.nullable {
		return t.nullCol.Rows()
	}
	return t.col.Rows()
	{{- end }}
}

func (t *{{ $type.ColumnTypeName }}) EncodeColumn(buffer *proto.Buffer) {
	{{- if $type.CannotBeNull }}
	t.col.EncodeColumn(buffer)
	{{- else }}
	if t.nullable {
		t.nullCol.EncodeColumn(buffer)
		return
	}
	t.col.EncodeColumn(buffer)
	{{- end }}
}

{{ if $type.Preparable }}
func (t *{{ $type.ColumnTypeName }}) Prepare() error {
	return t.col.Prepare()
}
{{ end }}

{{ end }}
