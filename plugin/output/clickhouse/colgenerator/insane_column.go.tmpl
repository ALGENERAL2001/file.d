// Code generated by "./colgenerator"; DO NOT EDIT.

package clickhouse

import (
	"errors"
	"fmt"

	"github.com/ClickHouse/ch-go/proto"
	insaneJSON "github.com/vitkovskii/insane-json"
)

type InsaneColInput interface {
	proto.ColInput
	Append(node *insaneJSON.StrictNode) error
	Reset()
}

func insaneInfer(auto proto.ColAuto) (InsaneColInput, error) {
	t := auto.Type()
	nullable := t.Base() == proto.ColumnTypeNullable
	switch t {
	{{- range $type := .Types }}
	{{ $protoTypeName := or $type.ProtoAlias $type.ProtoName -}}

	case {{ printf "proto.ColumnType%s" $protoTypeName  }}:
		return New{{ printf "Col%s" $type.ProtoName }}(nullable), nil
	{{- end }}
	default:
		return nil, fmt.Errorf("inference for type %s is not supported", t.String())
	}
}

var (
	ErrNodeIsNil = errors.New("node is nil, but column is not")
)

{{ range $type := .Types }}

{{- $chTypeName :=  printf "Col%s" $type.ProtoName }}
{{- $chTypeRef := printf "proto.%s" $chTypeName }}
{{- $chTypeNull := printf "proto.ColNullable[%s]" $type.GoName }}

type {{ $chTypeName }} struct {
	{{- if $type.CannotBeNull }}
	col *{{ $chTypeRef }}
	{{- else }}
	col      *{{ $chTypeRef }}
	nullCol  {{ $chTypeNull }}
	nullable bool
	{{- end }}
}

var _ InsaneColInput = (*{{ $chTypeName }})(nil)

func New{{- $chTypeName }}(nullable bool) *{{ $chTypeName }} {
	{{- if $type.CannotBeNull  }}
	 return &{{ $chTypeName }}{
        col: &{{ $chTypeRef }}{},
    }
	{{- else }}
    return &{{ $chTypeName }}{
        col: &{{ $chTypeRef }}{},
        nullCol: {{ $chTypeNull }}{},
        nullable: nullable,
    }
    {{- end}}
}

func (t *{{ $chTypeName }}) Append(node *insaneJSON.StrictNode) error {
	if node == nil {
		{{- if $type.CannotBeNull }}
		return ErrNodeIsNil
		{{- else }}
		if !t.nullable {
			return ErrNodeIsNil
		}
		t.nullCol.Append(proto.Null[{{- $type.GoName }}]())
		return nil
		{{- end }}
	}
	{{ if $type.CannotConvert }}
	val, err := node.{{- $type.InsaneConvertFunc }}()
    if err != nil {
		return err
    }
	{{ else }}
	v, err := node.{{- $type.InsaneConvertFunc }}()
	if err != nil {
		return err
	}
	{{- if $type.IsComplexNumber}}
	val := {{ $type.GoName}}FromInt(v)
	{{- else }}
	val := {{ $type.GoName }}(v)
	{{- end}}
	{{- end }}
	{{- if not $type.CannotBeNull }}
	if t.nullable {
	    t.nullCol.Append(proto.NewNullable(val))
		return nil
	}
	{{- end }}
    t.col.Append(val)

	return nil
}

func (t *{{ $chTypeName }}) Reset() {
    t.col.Reset()
	{{- if not $type.CannotBeNull }}
    t.nullCol.Reset()
	{{- end }}
}

func (t *{{ $chTypeName }}) SetNullable() {
	{{- if not $type.CannotBeNull }}
    t.nullable = true
	{{- end }}
}

func (t *{{ $chTypeName }}) Type() proto.ColumnType {
    {{- if $type.CannotBeNull }}
    return t.col.Type()
	{{- else }}
	if t.nullable {
		return t.col.Type()
	}
	return t.nullCol.Type()
    {{- end }}
}

func (t *{{ $chTypeName }}) Rows() int {
    {{- if $type.CannotBeNull }}
    return t.col.Rows()
	{{- else }}
	if t.nullable {
		return t.col.Rows()
	}
	return t.nullCol.Rows()
    {{- end }}
}

func (t *{{ $chTypeName }}) EncodeColumn(buffer *proto.Buffer) {
    {{- if $type.CannotBeNull }}
    t.col.EncodeColumn(buffer)
	{{- else }}
	if t.nullable {
		t.col.EncodeColumn(buffer)
	}
	t.nullCol.EncodeColumn(buffer)
    {{- end }}
}
{{- end }}
