// Code generated by "./colgenerator"; DO NOT EDIT.

package clickhouse

import (
	"fmt"

	"github.com/ClickHouse/ch-go/proto"
	insaneJSON "github.com/vitkovskii/insane-json"
)
{{- range $type := .Types }}
{{- $chTypeName :=  printf "%s%s" "Col" $type.ProtoName }}
{{- $chTypeRef := printf "%s.%s" "proto" $chTypeName }}
{{- $chTypeNull := printf "proto.ColNullable[%s]" $type.GoName }}

type {{ $chTypeName }} struct {
	{{- if $type.CannotBeNull }}
	col      *{{ $chTypeRef }}
	{{- else }}
	col      *{{ $chTypeRef }}
	nullCol  {{ $chTypeNull }}
	nullable bool
	{{- end }}
}

func (t *{{ $chTypeName }}) Append(node *insaneJSON.StrictNode) error {
	if node == nil {
		{{- if $type.CannotBeNull }}
		return fmt.Errorf("node is nul, but column is not")
		{{- else }}
		if !t.nullable {
			return fmt.Errorf("node is nil, but column is not")
		}
		t.nullCol.Append(proto.Null[{{- $type.GoName }}]())
		return nil
		{{- end }}
	}
	{{ if $type.CannotConvert }}
	val, err := node.{{- $type.InsaneConvertFunc }}()
    if err != nil {
		return err
    }
	{{ else }}
	v, err := node.{{- $type.InsaneConvertFunc }}()
	if err != nil {
		return err
	}
	{{- if $type.IsComplexNumber}}
	val := {{ $type.GoName}}FromInt(v)
	{{- else }}
	val := {{ $type.GoName }}(v)
	{{- end}}
	{{- end }}
	{{- if not $type.CannotBeNull }}
	if t.nullable {
	    t.nullCol.Append(proto.NewNullable(val))
		return nil
	}
	{{- end }}
    t.col.Append(val)

	return nil
}

func (t *{{ $chTypeName }}) Reset() {
    t.col.Reset()
	{{- if not $type.CannotBeNull }}
    t.nullCol.Reset()
	{{- end }}
}

func (t *{{ $chTypeName }}) SetNullable() {
	{{- if not $type.CannotBeNull }}
    t.nullable = true
	{{- end }}
}
{{- end }}
